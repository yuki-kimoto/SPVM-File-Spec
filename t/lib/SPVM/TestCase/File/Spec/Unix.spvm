class TestCase::File::Spec::Unix {
  use File::Spec::Unix;
  use Sys;
  use Array;
  
  static method canonpath : int () {
    
    my $spec = File::Spec::Unix->new;
    
    {
      my $canonpath = $spec->canonpath("xx////xx");
      unless ($canonpath eq "xx/xx") {
        return 0;
      }
    }
    {
      my $canonpath = $spec->canonpath("xx/././xx");
      unless ($canonpath eq "xx/xx") {
        return 0;
      }
    }
    {
      my $canonpath = $spec->canonpath("./xx");
      unless ($canonpath eq "xx") {
        return 0;
      }
    }
    {
      my $canonpath = $spec->canonpath("/../../xx");
      unless ($canonpath eq "/xx") {
        return 0;
      }
    }
    {
      my $canonpath = $spec->canonpath("/..");
      unless ($canonpath eq "/") {
        return 0;
      }
    }
    {
      my $canonpath = $spec->canonpath("xx/");
      unless ($canonpath eq "xx") {
        return 0;
      }
    }
    
    return 1;
  }

  static method catdir : int () {
    
    my $spec = File::Spec::Unix->new;
    
    {
      my $catdir = $spec->catdir(["foo", "bar", "baz"]);
      unless ($catdir eq "foo/bar/baz") {
        return 0;
      }
    }
    
    return 1;
  }

  static method catfile : int () {
    
    my $spec = File::Spec::Unix->new;
    
    {
      my $catdir = $spec->catfile(["foo", "bar", "baz"], "a.txt");
      unless ($catdir eq "foo/bar/baz/a.txt") {
        return 0;
      }
    }
    
    return 1;
  }

  static method no_upwards : int () {
    
    my $spec = File::Spec::Unix->new;
    
    {
      my $no_upwards = $spec->no_upwards([".", "..", "./foo", "../bar", "bar/baz"]);
      unless (Array->equals_string($no_upwards, ["./foo", "../bar", "bar/baz"])) {
        return 0;
      }
    }
    
    return 1;
  }
}
