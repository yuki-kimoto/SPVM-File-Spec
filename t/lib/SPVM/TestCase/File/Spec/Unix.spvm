class TestCase::File::Spec::Unix {
  use File::Spec::Unix;
  use Sys;
  use Array;
  
  static method canonpath : int () {
    
    my $spec = File::Spec::Unix->new;
    
    {
      my $canonpath = $spec->canonpath("xx////xx");
      unless ($canonpath eq "xx/xx") {
        return 0;
      }
    }
    {
      my $canonpath = $spec->canonpath("xx/././xx");
      unless ($canonpath eq "xx/xx") {
        return 0;
      }
    }
    {
      my $canonpath = $spec->canonpath("./xx");
      unless ($canonpath eq "xx") {
        return 0;
      }
    }
    {
      my $canonpath = $spec->canonpath("/../../xx");
      unless ($canonpath eq "/xx") {
        return 0;
      }
    }
    {
      my $canonpath = $spec->canonpath("/..");
      unless ($canonpath eq "/") {
        return 0;
      }
    }
    {
      my $canonpath = $spec->canonpath("xx/");
      unless ($canonpath eq "xx") {
        return 0;
      }
    }
    
    return 1;
  }

  static method catdir : int () {
    
    my $spec = File::Spec::Unix->new;
    
    {
      my $catdir = $spec->catdir(["foo", "bar", "baz"]);
      unless ($catdir eq "foo/bar/baz") {
        return 0;
      }
    }
    
    return 1;
  }

  static method catfile : int () {
    
    my $spec = File::Spec::Unix->new;
    
    {
      my $catfile = $spec->catfile(["foo", "bar", "baz"], "a.txt");
      unless ($catfile eq "foo/bar/baz/a.txt") {
        return 0;
      }
    }
    
    return 1;
  }

  static method no_upwards : int () {
    
    my $spec = File::Spec::Unix->new;
    
    {
      my $no_upwards = $spec->no_upwards([".", "..", "./foo", "../bar", "bar/baz"]);
      unless (Array->equals_string($no_upwards, ["./foo", "../bar", "bar/baz"])) {
        return 0;
      }
    }
    
    return 1;
  }

  static method file_name_is_absolute : int () {
    
    my $spec = File::Spec::Unix->new;
    
    {
      my $is_abs = $spec->file_name_is_absolute("/foo/bar");
      unless ($is_abs) {
        return 0;
      }
    }
    {
      my $is_abs = $spec->file_name_is_absolute("foo/bar");
      if ($is_abs) {
        return 0;
      }
    }
    
    return 1;
  }
  
  static method join : int () {
    
    my $spec = File::Spec::Unix->new;
    
    {
      my $join = $spec->join(["foo", "bar", "baz"], "a.txt");
      unless ($join eq "foo/bar/baz/a.txt") {
        return 0;
      }
    }
    
    return 1;
  }

  static method catpath : int () {
    
    my $spec = File::Spec::Unix->new;
    
    {
      my $catpath = $spec->catpath("c:", "foo/bar/", "a.txt");
      unless ($catpath eq "foo/bar/a.txt") {
        return 0;
      }
    }
    {
      my $catpath = $spec->catpath("c:", "foo/bar", "a.txt");
      unless ($catpath eq "foo/bar/a.txt") {
        return 0;
      }
    }
    {
      my $catpath = $spec->catpath("c:", "foo/bar", "/a.txt");
      unless ($catpath eq "foo/bar/a.txt") {
        return 0;
      }
    }
    
    return 1;
  }

  static method splitpath : int () {
    
    my $spec = File::Spec::Unix->new;
    
    {
      my $no_file = 1;
      my $splitpath = $spec->splitpath("foo/bar", $no_file);
      unless ($splitpath->[0] eq "") {
        return 0;
      }
      unless ($splitpath->[1] eq "foo/bar") {
        return 0;
      }
      unless ($splitpath->[2] eq "") {
        return 0;
      }
    }
    {
      my $splitpath = $spec->splitpath("foo/bar/a.txt");
      
      unless ($splitpath->[0] eq "") {
        return 0;
      }
      unless ($splitpath->[1] eq "foo/bar/") {
        return 0;
      }
      unless ($splitpath->[2] eq "a.txt") {
        return 0;
      }
    }
    {
      my $splitpath = $spec->splitpath("/foo/bar/a.txt");
      unless ($splitpath->[0] eq "") {
        return 0;
      }
      unless ($splitpath->[1] eq "/foo/bar/") {
        return 0;
      }
      unless ($splitpath->[2] eq "a.txt") {
        return 0;
      }
    }
    
    return 1;
  }

}
