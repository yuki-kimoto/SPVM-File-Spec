class TestCase::File::Spec {
  use File::Spec;
  use File::Spec::Unix;
  use File::Spec::Win32;
  use Sys;
  
  static method test : int () {
    
    {
      my $spec = File::Spec->new;
      unless ($spec is_compile_type File::Spec) {
        return 0;
      }
      
      if (Sys->defined("_WIN32")) {
        unless ($spec is_type File::Spec::Win32) {
          return 0;
        }
        unless ($spec isa File::Spec::Win32) {
          return 0;
        }
        unless ($spec isa File::Spec) {
          return 0;
        }
      }
      else {
        unless ($spec is_type File::Spec::Unix) {
          return 0;
        }
        unless ($spec isa File::Spec::Unix) {
          return 0;
        }
        unless ($spec isa File::Spec) {
          return 0;
        }
      }
    }

    {
      my $spec = File::Spec::Unix->new;
      unless ($spec is_compile_type File::Spec::Unix) {
        return 0;
      }
      unless ($spec is_type File::Spec::Unix) {
        return 0;
      }
      unless ($spec isa File::Spec::Unix) {
        return 0;
      }
    }

    {
      my $spec = File::Spec::Win32->new;
      unless ($spec is_compile_type File::Spec::Win32) {
        return 0;
      }
      unless ($spec is_type File::Spec::Win32) {
        return 0;
      }
      unless ($spec isa File::Spec::Win32) {
        return 0;
      }
    }
    
    {
      my $spec = (File::Spec::Interface)File::Spec::Win32->new;
      $spec->curdir;
    }
    
    {
      my $spec = (File::Spec::Interface)File::Spec::Win32->new;
      $spec->curdir;
    }
    
    # file_name_is_absolute
    {
      my $spec = File::Spec->new;
      my $path = "t/basic.t";
      my $is_abs = $spec->file_name_is_absolute($path);
      if ($is_abs) {
        return 0;
      }
    }
    
    return 1;
  }
}
