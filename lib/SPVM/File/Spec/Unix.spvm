class File::Spec::Unix extends File::Spec {
  use Regex;
  
  static method new : File::Spec::Unix () {
    
    my $self = new File::Spec::Unix;
    
    return $self;
  }

  method devnull : string () {
    return "/dev/null";
  }
  
  method rootdir : string () {
    return "/";
  }
  
  method curdir : string () {
    return ".";
  }

  method updir : string () {
    return "..";
  }

  method case_tolerant : int () {
    return 0;
  }

  method canonpath : string ($path : string) {
    unless ($path) {
      die "The \$path must be defined";
    }
    
    # xx////xx  -> xx/xx
    $path = Regex->new("/{2,}")->replace_g($path, "/");
    
    # xx/././xx -> xx/xx
    $path = Regex->new("(?:/\.)+(?:/|\z)")->replace_g($path, "/");
    
    # ./xx      -> xx
    unless ($path eq "./") {
      $path = Regex->new("(?s)^(?:\./)+")->replace_g($path, "");
    }
    
    # /../../xx -> xx
    $path = Regex->new("^/(?:\.\./)+")->replace($path, "/");
    
    # /..       -> /
    $path = Regex->new("^/\.\.$")->replace($path, "/");
    
    # xx/       -> xx
    unless ($path eq "/") {
      $path = Regex->new("/\z")->replace($path, "");
    }
    
    return $path;
  }

  method catdir : string ($dir_part_names : string[]) {
    my $path = Fn->join("/", $dir_part_names);
    $path .= "/";
    
    my $canonpath = $self->canonpath($path);
    
    return $canonpath;
  }

=pod TODO

  method catfile : string ($directories : string[], $filename : string);
  
  method tmpdir : string ();
  
  method no_upwards : string[] ($directories : string[]);
  
  method file_name_is_absolute : int ($path : string);
  
  method path : string[] ();
  
  method join : string ($directories : string[], $filename : string);
  
  method splitpath : string[] ($path : string, $no_file = 0 : int);
  
  method splitdir : string[] ($directories : string[]);
   
  method catpath : string ($volume : string, $directory : string, $file : string);
  
  method abs2rel : string ($path : string, $base : string);
  
  method rel2abs : string ($path : string, $base : string);

=cut

}
