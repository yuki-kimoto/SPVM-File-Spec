# Copyright (c) 2023 Yuki Kimoto
# MIT License

class File::Spec::Instance {
  
  use Sys;
  use File::Spec::Instance::Unix;
  use File::Spec::Instance::Win32;
  use Sys::OS;
  
  # Class Methods
  static method new : File::Spec::Instance () {
    
    my $self : File::Spec::Instance;
    
    if (Sys::OS->is_windows) {
      $self = File::Spec::Instance::Win32->new;
    }
    else {
      $self = File::Spec::Instance::Unix->new;
    }
    
    return $self;
  }
  
  # Instance Methods
  method has_interfaces : int () { return 1; }
  
  method canonpath : string ($path : string) { die "Not implemented"; }
  
  method catdir : string ($directories : string[]) { die "Not implemented"; }
  
  method catfile : string ($directories : string[], $filename : string) { die "Not implemented"; }
  
  method curdir : string () { die "Not implemented"; }
  
  method devnull : string () { die "Not implemented"; }
  
  method rootdir : string () { die "Not implemented"; }
  
  method tmpdir : string () { die "Not implemented"; }
  
  method updir : string () { die "Not implemented"; }
  
  method no_upwards : string[] ($directories : string[]) { die "Not implemented"; }
  
  method file_name_is_absolute : int ($path : string) { die "Not implemented"; }
  
  method file_name_is_root : int ($path : string) { die "Not implemented"; }
  
  method path : string[] () { die "Not implemented"; }
  
  method join : string ($directories : string[], $filename : string) { die "Not implemented"; }
  
  method splitpath : string[] ($path : string, $no_file = 0 : int) { die "Not implemented"; }
  
  method splitdir : string[] ($path : string) { die "Not implemented"; }
   
  method catpath : string ($volume : string, $directory : string, $file : string) { die "Not implemented"; }
  
  method abs2rel : string ($path : string, $base = undef : string) { die "Not implemented"; }
  
  method rel2abs : string ($path : string, $base = undef : string) { die "Not implemented"; }
}
