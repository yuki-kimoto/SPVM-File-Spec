class File::Spec::Win32 extends File::Spec::Unix {
  use Regex;
  use StringList;
  
  our $DRIVE_RX_STRING : private string;
  our $UNC_RX_STRING : private string;
  our $VOL_RX_STRING : private string;

  INIT {
    $DRIVE_RX_STRING = "[a-zA-Z]:";
    $UNC_RX_STRING = "(?:\\\\\\\\|//)[^\\\\/]+[\\\\/][^\\\\/]+";
    $VOL_RX_STRING = "(?:$DRIVE_RX_STRING|$UNC_RX_STRING)";
  }

  static method new : File::Spec::Win32 () {
    
    my $self = new File::Spec::Win32;
    
    return $self;
  }
  
  method devnull : string () {
    return "nul";
  }
  
  method rootdir : string () {
    return "\\";
  }

  method tmpdir : string () {
    my $env_tmpdir = Sys->getenv("TMPDIR");
    my $env_temp = Sys->getenv("TEMP");
    my $env_tmp = Sys->getenv("TMP");
    my $dirlist = [
      $env_tmpdir,
      $env_temp,
      $env_tmp,
      "SYS:/temp",
      "C:\system\temp",
      "C:/temp",
      "/tmp",
      "/",
    ];

    my $tmpdir = $self->_tmpdir($dirlist);
    return $tmpdir;
  }
  
  method file_name_is_absolute : int ($path : string) {
    
    my $is_abs = 0;
    my $vol_re = Regex->new("^($VOL_RX_STRING)");
    if ($vol_re->match($path)) {
      my $vol = $vol_re->cap1;
      
      my $unc_re = Regex->new("^$UNC_RX_STRING");
      if ($unc_re->match($vol)) {
        $is_abs = 2;
      }
      else {
        my $drive_re = Regex->new("^$DRIVE_RX_STRING[\\/]");
        if ($drive_re->match($path)) {
          $is_abs = 2;
        }
      }
    }
    else {
      my $re = Regex->new("^[\\/]");
      my $is_abs = 0;
      if ($re->match($path)) {
        $is_abs = 1;
      }
    }
    
    return $is_abs;
  }

  method _same : int ($path1 : string, $path2 : string) {
    my $same = 0;
    if (Fn->lc($path1) eq Fn->lc($path2)) {
      $same = 1;
    }
    return $same;
  }
  
  method path : string[] () {
    
    my $env_path = Sys->getenv("PATH");
    unless ($env_path) {
      return new string[0];
    }
    
    my $pathes = File::Spec::Unix->compatible_split(";", $env_path);
    
    my $re = Regex->new("\"");
    my $pathes_list = StringList->new;
    for (my $i = 0; $i < @$pathes; $i++) {
      my $path = $pathes->[$i];
      $path = $re->replace_g($path, "");
      if (length $path) {
        $pathes_list->push($path);
      }
    }
    $pathes_list->unshift(".");
    $pathes = $pathes_list->to_array;
    
    return $pathes;
  }
}
